version: "3"
services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.7
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-tier
    restart:
      - always

  kafka:
    image: docker.io/bitnami/kafka:2
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app-tier
    restart:
      - always

  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    links:
      - kafka
    restart:
      - always
      
  spark-worker-1:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    restart:
      - always
      
  spark-worker-2:
    image: bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    restart:
      - always

  zeppelin:
    image: spark-zeppelin
    build:
      context: ./de-hands-on/docker-apache-spark-zeppelin
      dockerfile: Dockerfile
    hostname: zeppelin
    container_name: zeppelin
    ports:
      - "0.0.0.0:8888:8080"
    expose:
      - "8443"
      - "4040"
    volumes:
      - ./zeppelin/datadrive:/datadrive
      - ./zeppelin/pyspark-notebooks:/zeppelin/notebook
      - ./zeppelin/zeppelin-interpreters/interpreter.json:/zeppelin/conf/interpreter.json
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_HOME=/spark"
    depends_on:
      - spark-master
    restart:
      - always

networks:
  app-tier:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
